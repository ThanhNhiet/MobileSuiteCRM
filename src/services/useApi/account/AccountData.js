import AccountApi from '../../api/account/AccountApi';

// Helper function ƒë·ªÉ l·∫•y module metadata t·ª´ API
const getModuleMetadata = async (token) => {
  try {
    // G·ªçi API ƒë·ªÉ l·∫•y metadata c·ªßa t·∫•t c·∫£ modules
    const metaResponse = await AccountApi.getModuleMeta(token);
    
    if (!metaResponse || !metaResponse.data) {
      console.log('‚ùå Module meta response is null/undefined');
      return null;
    }

    // Chuy·ªÉn ƒë·ªïi metadata th√†nh object ƒë·ªÉ d·ªÖ lookup
    const moduleMetaMap = {};
    if (Array.isArray(metaResponse.data)) {
      metaResponse.data.forEach(module => {
        if (module.attributes) {
          moduleMetaMap[module.attributes.name] = {
            name: module.attributes.name,
            label: module.attributes.label || module.attributes.name,
            labelSingular: module.attributes.label_singular || module.attributes.label || module.attributes.name,
            table: module.attributes.table || module.attributes.name.toLowerCase(),
            // Th√™m c√°c th√¥ng tin kh√°c n·∫øu c·∫ßn
            ...module.attributes
          };
        }
      });
    }

    console.log('üìã Module metadata loaded:', Object.keys(moduleMetaMap));
    return moduleMetaMap;
  } catch (error) {
    console.error('üí• Error getting module metadata:', error);
    return null;
  }
};

// Helper function ƒë·ªÉ chuy·ªÉn ƒë·ªïi module name th√†nh t√™n hi·ªÉn th·ªã t·ª´ metadata
const getModuleDisplayName = (moduleName, moduleMetaMap = null) => {
  // N·∫øu c√≥ metadata t·ª´ API, d√πng label t·ª´ ƒë√≥
  if (moduleMetaMap && moduleMetaMap[moduleName]) {
    return moduleMetaMap[moduleName].labelSingular || moduleMetaMap[moduleName].label || moduleName;
  }

  // N·∫øu kh√¥ng c√≥ metadata, tr·∫£ v·ªÅ moduleName g·ªëc
  return moduleName;
};

const AccountData = {};
AccountData.getFields = async (token) => {
  try {
    const fields = await AccountApi.getFields(token);
    const language = await AccountApi.getLanguage(token);

    if (!fields || !fields.data) {
      console.log('‚ùå Fields or fields.data is null/undefined');
      return null;
    }

    // X√°c ƒë·ªãnh c·∫•u tr√∫c language
    let modStrings = null;
    if (language && language.data && language.data.mod_strings) {
      modStrings = language.data.mod_strings;
      console.log('‚úÖ Using language.data.mod_strings');
    } else if (language && language.mod_strings) {
      modStrings = language.mod_strings;
      console.log('‚úÖ Using language.mod_strings');
    } else {
      console.log('‚ö†Ô∏è No mod_strings found, using field keys as labels');
      modStrings = {};
    }

    const attributes = fields.data.attributes;

    const requiredFields = Object.entries(attributes || {})
      .filter(([_, val]) => val.required === true)
      .map(([key, val]) => {
        const { required, ...rest } = val;

        let translatedLabel = key; // Fallback m·∫∑c ƒë·ªãnh

        // D√πng mod_strings t·ª´ API ƒë·ªÉ d·ªãch
        if (modStrings) {
          // C√°ch 1: D√πng pattern LBL_FIELDNAME
          const labelKey = `LBL_${key.toUpperCase()}`;
          if (modStrings[labelKey]) {
            translatedLabel = modStrings[labelKey];
            
          }
          // C√°ch 2: D√πng pattern LBL_LIST_FIELDNAME (cho list views)
          else if (modStrings[`LBL_LIST_${key.toUpperCase()}`]) {
            translatedLabel = modStrings[`LBL_LIST_${key.toUpperCase()}`];
            
          }
          // C√°ch 3: D√πng LBL_ACCOUNT_NAME cho field name
          else if (key === 'name' && modStrings['LBL_ACCOUNT_NAME']) {
            translatedLabel = modStrings['LBL_ACCOUNT_NAME'];
            
          }
          // C√°ch 4: D√πng LBL_LIST_ACCOUNT_NAME cho field name
          else if (key === 'name' && modStrings['LBL_LIST_ACCOUNT_NAME']) {
            translatedLabel = modStrings['LBL_LIST_ACCOUNT_NAME'];
            
          }
          // C√°ch 5: D√πng key tr·ª±c ti·∫øp
          else if (modStrings[key]) {
            translatedLabel = modStrings[key];
            
          }
          // C√°ch 6: D√πng key uppercase
          else if (modStrings[key.toUpperCase()]) {
            translatedLabel = modStrings[key.toUpperCase()];
           
          }
          // C√°ch 7: X·ª≠ l√Ω c√°c field ƒë·∫∑c bi·ªát
          else if (key === 'email1' && (modStrings['LBL_EMAIL'] || modStrings['LBL_EMAIL_ADDRESS'])) {
            translatedLabel = modStrings['LBL_EMAIL'] || modStrings['LBL_EMAIL_ADDRESS'];
            
          }
          else if (key === 'phone_office' && modStrings['LBL_PHONE_OFFICE']) {
            translatedLabel = modStrings['LBL_PHONE_OFFICE'];
            
          }
          else if (key === 'website' && modStrings['LBL_WEBSITE']) {
            translatedLabel = modStrings['LBL_WEBSITE'];
            
          }
          // C√°ch 8: T√¨m theo pattern kh√°c trong mod_strings
          else {
            // T√¨m c√°c keys trong mod_strings c√≥ ch·ª©a t√™n field
            const possibleKeys = Object.keys(modStrings).filter(k => 
              k.toLowerCase().includes(key.toLowerCase()) ||
              (key === 'name' && (k.includes('ACCOUNT') || k.includes('NAME'))) ||
              (key === 'email1' && (k.includes('EMAIL'))) ||
              (key.includes('phone') && k.includes('PHONE')) ||
              (key.includes('address') && k.includes('ADDRESS'))
            );
            
            if (possibleKeys.length > 0) {
              translatedLabel = modStrings[possibleKeys[0]];
              
            } else {
              console.log(`‚ö†Ô∏è No translation found for ${key}, using formatted key`);
            }
          }
        }

        // N·∫øu v·∫´n ch∆∞a c√≥ label t·ª´ API, format key ƒë·∫πp h∆°n
        if (translatedLabel === key) {
          // Format ƒë·∫∑c bi·ªát cho m·ªôt s·ªë field th√¥ng d·ª•ng
          const specialFormats = {
            'email1': 'Email',
            'phone_office': 'S·ªë ƒëi·ªán tho·∫°i',
            'website': 'Website',
            'billing_address_street': 'ƒê·ªãa ch·ªâ thanh to√°n',
            'shipping_address_street': 'ƒê·ªãa ch·ªâ giao h√†ng',
            'assigned_user_name': 'Ng∆∞·ªùi ph·ª• tr√°ch',
            'date_entered': 'Ng√†y t·∫°o',
            'date_modified': 'Ng√†y s·ª≠a',
            'description': 'M√¥ t·∫£'
          };
          
          if (specialFormats[key]) {
            translatedLabel = specialFormats[key];
          } else {
            // Format m·∫∑c ƒë·ªãnh: vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu v√† thay _ th√†nh kho·∫£ng tr·∫Øng
            translatedLabel = key.charAt(0).toUpperCase() + key.slice(1).replace(/_/g, ' ');
          }
        }

        return {
          key,
          label: translatedLabel,
          ...rest
        };
      });

    console.log('üéØ Final required fields:', requiredFields);
    return requiredFields;
    
  } catch (error) {
    console.error('üí• Error in getFields:', error);
    return null;
  }
};

  // L·∫•y danh s√°ch c√°c tr∆∞·ªùng hi·ªÉn th·ªã trong view
AccountData.getListFieldsView = async (token) => {
  try {
    
    
    const fields = await AccountApi.getListFieldsView(token);
    const language = await AccountApi.getLanguage(token);
    
   

    // Ki·ªÉm tra fields response
    if (!fields) {
      console.log('‚ùå Fields is null/undefined');
      return null;
    }
    
    // X√°c ƒë·ªãnh c·∫•u tr√∫c fields
    let defaultFieldsObject = null;
    if (fields.default_fields) {
      defaultFieldsObject = fields.default_fields;
      
    } else if (fields.data && fields.data.default_fields) {
      defaultFieldsObject = fields.data.default_fields;
      
    } else {
      console.log('‚ùå No default_fields found. Available keys:', Object.keys(fields));
      return null;
    }

    // Ki·ªÉm tra language response
    if (!language) {
      console.log('‚ùå Language is null/undefined');
      return null;
    }
    
    // X√°c ƒë·ªãnh c·∫•u tr√∫c language
    let modStrings = null;
    if (language.data && language.data.mod_strings) {
      modStrings = language.data.mod_strings;
     
    } else if (language.mod_strings) {
      modStrings = language.mod_strings;
      
    } else {
      console.log('‚ùå No mod_strings found. Available keys:', Object.keys(language));
      return null;
    }

    // Chuy·ªÉn ƒë·ªïi object th√†nh array
    const defaultFields = Object.entries(defaultFieldsObject).map(([key, field]) => ({
      key,
      ...field
    }));
    
   

    // D·ªãch labels
    const translatedFields = defaultFields.map((field) => {
      let translatedLabel = field.key; // Fallback m·∫∑c ƒë·ªãnh
      
      // Th·ª≠ c√°c c√°ch d·ªãch kh√°c nhau
      if (field.label && modStrings[field.label]) {
        // C√°ch 1: D√πng field.label l√†m key trong mod_strings
        translatedLabel = modStrings[field.label];
       
      } else if (modStrings[field.key]) {
        // C√°ch 2: D√πng field.key tr·ª±c ti·∫øp
        translatedLabel = modStrings[field.key];
        
      } else if (modStrings[`LBL_${field.key.toUpperCase()}`]) {
        // C√°ch 3: D√πng pattern LBL_FIELDNAME
        translatedLabel = modStrings[`LBL_${field.key.toUpperCase()}`];
        
      } else {
        console.log(`‚ö†Ô∏è No translation found for ${field.key}, using fallback: ${translatedLabel}`);
      }
      
      return {
        ...field,
        label: translatedLabel,
        originalLabel: field.label // Gi·ªØ l·∫°i label g·ªëc ƒë·ªÉ debug
      };
    });
    
   
    return translatedFields;
    
  } catch (error) {
    console.error('üí• Error in getListFieldsView:', error);
    return null;
  }
};
// L·∫•y danh s√°ch d·ªØ li·ªáu theo trang
AccountData.getDataByPage = async(token, page, pageSize) => {
  try {
    const response = await AccountApi.getDataByPage(token, page, pageSize);
    
    if (!response || !response.data) {
      console.log('‚ùå Response or response.data is null/undefined');
      return null;
    }

    // Tr·∫£ v·ªÅ data v·ªõi meta information
    return {
      meta: response.meta || {},
      accounts: response.data.map(account => ({
        id: account.id,
        type: account.type,
        ...account.attributes
      }))
    };
    
  } catch (error) {
    console.error('üí• Error in getDataByPage:', error);
    return null;
  }
};

// L·∫•y danh s√°ch d·ªØ li·ªáu theo fields ƒë√£ ƒë·ªãnh nghƒ©a
AccountData.getDataWithFields = async(token, page, pageSize) => {
  try {
    // L·∫•y fields v√† data song song
    const [fieldsResult, dataResult] = await Promise.all([
      AccountData.getFields(token),
      AccountData.getDataByPage(token, page, pageSize)
    ]);

    if (!fieldsResult || !dataResult) {
      console.log('‚ùå Fields or Data is null/undefined');
      return null;
    }

    // X·ª≠ l√Ω accounts data
    const processedAccounts = dataResult.accounts.map(account => {
      // T·∫°o object account v·ªõi c·∫•u tr√∫c ƒë∆°n gi·∫£n
      const processedAccount = { 
        id: account.id, 
        type: account.type 
      };
      
      // Th√™m t·∫•t c·∫£ attributes v√†o account object
      fieldsResult.forEach(field => {
        const fieldKey = field.key;
        processedAccount[fieldKey] = account[fieldKey] || '';
      });

      return processedAccount;
    });

    // Tr·∫£ v·ªÅ object v·ªõi c·∫•u tr√∫c gi·ªëng useAccountDetail
    return {
      accounts: processedAccounts,
      detailFields: fieldsResult.map(field => ({
        key: field.key,
        label: field.label ? field.label.replace(':', '') : field.key
      })),
      meta: dataResult.meta || {},
      getFieldValue: (accountData, key) => {
        return accountData[key] || '';
      },
      getFieldLabel: (key) => {
        const field = fieldsResult.find(f => f.key === key);
        return field ? field.label : key;
      },
      shouldDisplayField: (key) => {
        return fieldsResult.some(f => f.key === key);
      }
    };
    
  } catch (error) {
    console.error('üí• Error in getDataWithFields:', error);
    return null;
  }
};
// l·∫•y m·ªëi quan h·ªá c·ªßa account v·ªõi metadata t·ª´ V8/meta/modules
AccountData.getRelationships = async (token, accountId) => {
  try {
    // L·∫•y metadata v√† relationships song song ƒë·ªÉ t·ªëi ∆∞u performance
    const [metaResponse, relationshipsResponse] = await Promise.all([
      getModuleMetadata(token),
      AccountApi.getRelationships(token, accountId)
    ]);

    if (!relationshipsResponse || !relationshipsResponse.data) {
      console.log('‚ùå Relationships response or response.data is null/undefined');
      return null;
    }

    // X·ª≠ l√Ω relationships data t·ª´ API
    const relationshipsData = relationshipsResponse.data.relationships || relationshipsResponse.relationships;
    
    if (!relationshipsData) {
      console.log('‚ùå No relationships data found');
      return { relationships: [] };
    }

    // Chuy·ªÉn ƒë·ªïi object relationships th√†nh array v·ªõi metadata
    const relationshipsArray = Object.entries(relationshipsData).map(([moduleName, relationData]) => {
      const moduleInfo = metaResponse ? metaResponse[moduleName] : null;
      
      return {
        id: moduleName.toLowerCase(),
        moduleName: moduleName,
        displayName: getModuleDisplayName(moduleName, metaResponse),
        moduleLabel: moduleInfo?.label || moduleName,
        moduleLabelSingular: moduleInfo?.labelSingular || moduleName,
        moduleTable: moduleInfo?.table || moduleName.toLowerCase(),
        relatedLink: relationData.links?.related || '',
        // T√°ch accountId t·ª´ link ƒë·ªÉ s·ª≠ d·ª•ng sau
        accountId: relationData.links?.related ? 
          relationData.links.related.split('/')[3] : accountId
      };
    });

    // L·ªçc c√°c relationships quan tr·ªçng d·ª±a tr√™n metadata ho·∫∑c hardcode list
    const importantModules = ['Notes', 'Contacts', 'Meetings', 'Tasks', 'Calls', 'Opportunities', 'Cases'];
    const importantRelationships = relationshipsArray.filter(rel => 
      importantModules.includes(rel.moduleName)
    );

    // S·∫Øp x·∫øp theo th·ª© t·ª± ∆∞u ti√™n
    const sortedRelationships = importantRelationships.sort((a, b) => {
      const order = ['Notes', 'Contacts', 'Meetings', 'Tasks', 'Calls', 'Opportunities', 'Cases'];
      const indexA = order.indexOf(a.moduleName);
      const indexB = order.indexOf(b.moduleName);
      return (indexA !== -1 ? indexA : 999) - (indexB !== -1 ? indexB : 999);
    });

    // Tr·∫£ v·ªÅ data v·ªõi meta information
    return {
      relationships: sortedRelationships,
      allRelationships: relationshipsArray, // Gi·ªØ t·∫•t c·∫£ ƒë·ªÉ s·ª≠ d·ª•ng sau
      moduleMetadata: metaResponse 
    };
  } catch (error) {
    console.error('üí• Error in getRelationships:', error);
    return null;
  }
};

export default AccountData;
